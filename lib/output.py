from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate
from reportlab.platypus import Paragraph
from reportlab.platypus import PageBreak
from reportlab.platypus import Table
from reportlab.lib import colors
from prettytable import PrettyTable
from lib.colors import bcolors
import lib.html_template as template
import threading
import importlib
import requests
import logging 
import time
import json
import sys
import os
import io
import re
is_active = True

logging.getLogger('reportlab').setLevel(logging.WARNING)

def wheel_output(source):
    print(f"{bcolors.FG_YELLOW}[|] Generating {source}...", end="")
    while is_active:
        for _ in ["/", "-", "\\", "|"]:
            print(f"\r[{_}] Generating {source}...", end="")
            time.sleep(0.1)
    print(f"\r{bcolors.FG_GREEN}[+] Generating {source} FINISHED!{bcolors.END}")

def pdf(result, cve):
    sample_style_sheet = getSampleStyleSheet()
    sample_style_sheet.list()

    my_doc = SimpleDocTemplate(f'output/{cve}/{cve}.pdf')
    flowables = []
    my_doc.build(flowables)
    flowables.append(Paragraph(f"{cve}", sample_style_sheet['Heading1']))
    flowables.append(Paragraph(f"Date", sample_style_sheet['Heading2']))
    flowables.append(Paragraph(f'{result["mitre"]["date_created"][6:8]}.{result["mitre"]["date_created"][4:6]}.{result["mitre"]["date_created"][:4]}', sample_style_sheet['BodyText']))
    flowables.append(Paragraph(f"VECTOR", sample_style_sheet['Heading2']))
    flowables.append(Paragraph(f'{str(result["vulmon"]["overview"]).split("Vector: ")[-1] or result["nist"]["vector"]}',sample_style_sheet['BodyText']))
    flowables.append(Paragraph(f"COMPANY", sample_style_sheet['Heading2']))
    flowables.append(Paragraph(f'{result["mitre"]["assigning_cna"]}',sample_style_sheet['BodyText']))
    flowables.append(Paragraph(f"SCORE", sample_style_sheet['Heading2']))
    flowables.append(Paragraph(f'{result["vulmon"]["degree"] or result["nist"]["base_score"]}',sample_style_sheet['BodyText']))
    flowables.append(Paragraph(f"DESCRIPTION", sample_style_sheet['Heading2']))
    flowables.append(Paragraph(f'{result["nist"]["description"] or result["mitre"]["description"] or result["vulmon"]["description"]}',sample_style_sheet['BodyText']))

    flowables.append(Paragraph(f"REFERENCES", sample_style_sheet['Heading2']))
    data=[["SOURCE", "URL"]]
    mref = str(result["mitre"]["references"]).split("\n")
    URLS = []
    for i in mref:
        a = re.search("https?://.*", i)
        if a: 
            if is_valid_reference(str(a.group(0))):
                URLS.append(a.group(0))
    for i in URLS:
        if is_valid_reference(i):data.append(["mitre",i])
    for i in result["vulmon"]["references"]:
        if is_valid_reference(i):data.append(["vulmon",i])
    for i in result["nist"]["ref_list"]:
        if is_valid_reference(i["hyperlink"]): data.append(["nist",i["hyperlink"]])

    t=Table(data, style=[
                ("GRID", (0, 0), (-1, -1), 1, colors.black),
                ("BACKGROUND", (0, 0), (-1, 0), colors.grey),
                ("INNERGRID", (0, 0), (-1, -1), 0.25, colors.black),
                ("BOX", (0, 0), (-1, -1), 0.25, colors.black),
                ("TEXTCOLOR", (0, 0), (-1, -1), colors.black),
                ("FONTSIZE", (0, 0), (-1, -1), 9),
                ("VALIGN", (0, 0), (-1, -1), "MIDDLE"),
                ("ALIGN", (0, 0), (-1, -1), "LEFT"),
                ])
    Table(data, repeatRows=1)
    flowables.append(t)
    flowables.append(PageBreak())

    my_doc.build(flowables)

def is_valid_reference(url):
    try:
        response = requests.get(url)
        if response.status_code == 200 and "godaddy" not in response.text and "godaddy" not in response.headers:
            return True
        return False
    except Exception as e:
        return False

def html(result, cve):
    replace_left = template.replace_left.replace("NO_CVE_ID",cve)
    replace_right = template.replace_right
    replace_description = template.replace_description
    replace_references = template.replace_references
    replace_github = template.replace_github
    replace_exploits = template.replace_exploits
    if result["nist"]:
        replace_left = replace_left.replace("NO_VECTOR", str(result["nist"]["vector"]))
        replace_right = replace_right.replace("NO_SCORE", str(result["nist"]["base_score"]))
        replace_right = replace_right.replace("NO_CWE_ID", str(result["nist"]["weak_enum_list"][0]["cwe_id"]))
        replace_right = replace_right.replace("NO_CWE_NAME", str(result["nist"]["weak_enum_list"][0]["cwe_name"]))
        replace_right = replace_right.replace("NO_CWE_SOURCE", str(result["nist"]["weak_enum_list"][0]["cwe_source"]))
        replace_description = replace_description.replace("NO_DESCRIPTION", str(result["nist"]["description"]))
        for i in result["nist"]["ref_list"]:
            replace_references += f'<tr><td>Nist</td><td><a href={i["hyperlink"]}>{i["hyperlink"]}</a></td></tr>'

    if result["mitre"]:
        replace_left = replace_left.replace("NO_DATE", f'{result["mitre"]["date_created"][6:8]}.{result["mitre"]["date_created"][4:6]}.{result["mitre"]["date_created"][:4]}')
        replace_left = replace_left.replace("NO_COMPANY", str(result["mitre"]["assigning_cna"]))
        replace_description = replace_description.replace("NO_DESCRIPTION", str(result["mitre"]["description"]))
        URLS = []
        for i in result["mitre"]["references"].split("\n"):
            a = re.search("https?://.*", i)
            if a: 
                if is_valid_reference(str(a.group(0))):
                    URLS.append(a.group(0))
        for i in URLS:
            if is_valid_reference(i):
                replace_references += f'<tr><td>Mitre</td><td><a href="{i}">{i}</a></td></tr>'
            
    if result["vulmon"]:
        replace_left = replace_left.replace("NO_DATE", f'{result["vulmon"]["overview"].split(" ")[1]}')
        replace_left = replace_left.replace("NO_VECTOR", f'{result["vulmon"]["overview"].split(" ")[-1]}')
        replace_description = replace_description.replace("NO_DESCRIPTION", str(result["vulmon"]["description"]))
        if result["vulmon"]["references"]:
            for i in result["vulmon"]["references"]:
                replace_references += f'<tr><td>Vulmon</td><td><a href="{i}">{i}</a></td></tr>'
        if result["vulmon"]["github_repos"]:
            for i in result["vulmon"]["github_repos"]:
                replace_github += f'<tr><td>Vulmon</td><td><a href="{i}">{i}</a></td></tr>'
        if result["vulmon"]["exploits"]:
            for i in result["vulmon"]["exploits"]:
                replace_exploits += f'<tr><td>Vulmon</td><td><a href="{i}">{i}</a></td></tr>'
    
    replace_references += "</table>"
    replace_github += "</table>"
    replace_exploits += "</table>"
    full = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>{cve}</title>
        {template.css}
        <!-- GOOGLE FONTS -->
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Edu+NSW+ACT+Foundation:wght@400..700&family=Reddit+Mono:wght@200..900&display=swap" rel="stylesheet">
    </head>
    <body>
        <div class="top">
        {replace_left}
        {replace_right}
        </div>
        <div class="middle">
        <span>Description: </span>
        {replace_description}
        </div>
        <div class="bottom">
        <div class="references">
            {replace_references}
        </div>
        <div class="github">
            {replace_github}
        </div>
        <div class="exploits">
            {replace_exploits}
        </div>
        </div>
    </body>
    </html>
    """
    with io.open(f"output/{cve}/{cve}.html", "w", encoding="UTF-8") as html_file:
        html_file.write(full)

def txt(result, cve):
    # time.sleep(5)
    cli_result = """
 +-------------+
 | CVE DETAILS |
 +--+----------+
    |  +--------+
    +--+ CVE-ID |
    |  +--------+ 
    |    NO_CVE_ID
    |
    |  +------------+
    +--+ Descripion |
    |  +------------+
    |    NO_CVE_DESCRIPTION
    |
    |  +------+
    +--+ DATE |
    |  +------+
    |    NO_CVE_DATE
    |
    |  +--------+
    +--+ Vector |
    |  +--------+
    |    NO_VECTOR
    |
    |  +---------+
    +--+ COMPANY |
    |  +---------+
    |    NO_COMPANY
    |
    |  +-------+
    +--+ SCORE |
    |  +-------+
    |    NO_SCORE
    |""".replace("NO_CVE_ID", cve)
    if result["nist"]:
        try:
            cli_result = cli_result.replace("NO_CVE_DESCRIPTION", str(result["nist"]["description"]))
        
        except Exception as e:
            print(e)
        try:
            cli_result = cli_result.replace("NO_VECTOR", str(result["nist"]["vector"]))
            
        except Exception as e:
            print(e)
        try:
            cli_result = cli_result.replace("NO_SCORE", str(result["nist"]["base_score"]))
            
        except Exception as e:
            print(e)
    if result["mitre"]:
        try:
            cli_result = cli_result.replace("NO_CVE_DESCRIPTION", str(result["mitre"]["description"]))
            
        except Exception as e:
            print(e)
        try:
            cli_result = cli_result.replace("NO_CVE_DATE", f'{result["mitre"]["date_created"][6:8]}.{result["mitre"]["date_created"][4:6]}.{result["mitre"]["date_created"][:4]}')
            
        except Exception as e:
            print(e)
        try:
            cli_result = cli_result.replace("NO_COMPANY", str(result["mitre"]["assigning_cna"]))
            
        except Exception as e:
            print(e)
    if result["vulmon"]:
        try:
            cli_result = cli_result.replace("NO_CVE_DATE", f'{result["vulmon"]["overview"].split(" ")[1]}')
            
        except Exception as e:
            print(e)
        try:
            cli_result = cli_result.replace("NO_CVE_DESCRIPTION", str(result["vulmon"]["description"]))
            
        except Exception as e:
            print(e)
        try:
            cli_result = cli_result.replace("NO_VECTOR", f'{result["vulmon"]["overview"].split(" ")[-1]}')
            
        except Exception as e:
            print(e)
        try:
            cli_result = cli_result.replace("NO_SCORE", str(result["vulmon"]["degree"]))
            
        except Exception as e:
            print(e)


    if result["nist"]:
        cli_result += """
 +--+----------+
 | CWE DETAILS |
 +--+----------+"""
        for i in result["nist"]["weak_enum_list"]:
            cli_result += """
    |  +--------+
    +--+ CWE-ID |
    |  +--------+ 
    |    REPLACE_CWE_ID
    |
    |  +----------+
    +--+ CWE-NAME |
    |  +----------+
    |    REPLACE_CWE_NAME
    |
    |  +----------------+
    +--+ CWE-REFERENCES |
    |  +----------------+
    |    REPLACE_CWE_REFERENCES
    |""".replace("REPLACE_CWE_ID", i["cwe_id"]).replace("REPLACE_CWE_NAME", i["cwe_name"]).replace("REPLACE_CWE_REFERENCES", i["cwe_source"])
    table = PrettyTable()
    table.field_names = ["Source", "URL"]
    if result["nist"]:
        for i in result["nist"]["ref_list"]:
            table.add_row(["Nist", i["hyperlink"]])
    if result["vulmon"]:
        for i in result["vulmon"]["references"]:
            table.add_row(["Vulmon", i])
    if result["mitre"]:
        URLS = []
        for i in result["mitre"]["references"].split("\n"):
            a = re.search("https?://.*", i)
            if a: 
                if is_valid_reference(str(a.group(0))):
                    URLS.append(a.group(0))
        for i in URLS:
            if is_valid_reference(i):
                table.add_row(["Mitre", i])
    cli_result+=f"""
 +--+---------+
 | REFERENCES |
 +------------+
{table}"""
    if result["vulmon"]:
        if result["vulmon"]["github_repos"]:
            github_table = PrettyTable()
            github_table.field_names = ["Source", "URL"]
            for i in result["vulmon"]["github_repos"]:
                github_table.add_row(["Mitre", i])
            
            cli_result += f"""
 +--------+ 
 | GITHUB |
 +--------+
{github_table}"""
            if result["vulmon"]["exploits"]:
                exploit_table = PrettyTable()
                exploit_table.field_names = ["Source","URL"]
                for i in result["vulmon"]["exploits"]:
                    exploit_table.add_row(["Vulmon",i["url"]])
                cli_result += f"""
 +----------+
 | EXPLOITS |
 +----------+
{exploit_table}"""
    with io.open(f"output/{cve}/{cve}.txt", "w", encoding="UTF-8") as txt_data:
        txt_data.write(cli_result)

def cli(result, cve):
    print(f"{bcolors.FG_GREEN}[+] Entering page view!{bcolors.END}")
    proceed = input(f"{bcolors.FG_YELLOW}Do you want to enter page view? (Y/n)> {bcolors.END}").lower()
    while proceed not in ["y", "n", ""]:
        proceed = input(f"{bcolors.FG_YELLOW}Do you want to enter page view? (Y/n)> {bcolors.END}").lower()
    if proceed == "" or proceed == "y":
        cli_result = """
 +-------------+
 | CVE DETAILS |
 +--+----------+
    |  +--------+
    +--+ CVE-ID |
    |  +--------+ 
    |    NO_CVE_ID
    |
    |  +------------+
    +--+ Descripion |
    |  +------------+
    |    NO_CVE_DESCRIPTION
    |
    |  +------+
    +--+ DATE |
    |  +------+
    |    NO_CVE_DATE
    |
    |  +--------+
    +--+ Vector |
    |  +--------+
    |    NO_VECTOR
    |
    |  +---------+
    +--+ COMPANY |
    |  +---------+
    |    NO_COMPANY
    |
    |  +-------+
    +--+ SCORE |
    |  +-------+
    |    NO_SCORE
    |""".replace("NO_CVE_ID", cve)
        if result["nist"]:
            try:
                cli_result = cli_result.replace("NO_CVE_DESCRIPTION",str(result["nist"]["description"]))
                
            except Exception as e:
                print(e)
            try:
                cli_result = cli_result.replace("NO_VECTOR",str(result["nist"]["vector"]))
                
            except Exception as e:
                print(e)
            try:
                cli_result = cli_result.replace("NO_SCORE",str(result["nist"]["base_score"]))
                
            except Exception as e:
                print(e)  
        if result["mitre"]:
            try:
                cli_result = cli_result.replace("NO_CVE_DESCRIPTION",str(result["mitre"]["description"]))
                
            except Exception as e:
                print(e)
            try:
                cli_result = cli_result.replace("NO_CVE_DATE", f'{result["mitre"]["date_created"][6:8]}.{result["mitre"]["date_created"][4:6]}.{result["mitre"]["date_created"][:4]}')
                
            except Exception as e:
                print(e)
            try:
                cli_result = cli_result.replace("NO_COMPANY",str(result["mitre"]["assigning_cna"]))
                
            except Exception as e:
                print(e)  
        if result["vulmon"]:
            try:
                cli_result = cli_result.replace("NO_CVE_DATE", f'{result["vulmon"]["overview"].split(" ")[1]}')
                
            except Exception as e:
                print(e)
            try:
                cli_result = cli_result.replace("NO_CVE_DESCRIPTION",str(result["vulmon"]["description"]))
                
            except Exception as e:
                print(e)
            try:
                cli_result = cli_result.replace("NO_VECTOR", f'{result["vulmon"]["overview"].split(" ")[-1]}')
                
            except Exception as e:
                print(e)
            try:
                cli_result = cli_result.replace("NO_SCORE",str(result["vulmon"]["degree"]))
                
            except Exception as e:
                print(e)


        if result["nist"]:
            cli_result += """
 +--+----------+
 | CWE DETAILS |
 +--+----------+"""
            for i in result["nist"]["weak_enum_list"]:
                cli_result += """
    |  +--------+
    +--+ CWE-ID |
    |  +--------+ 
    |    REPLACE_CWE_ID
    |
    |  +----------+
    +--+ CWE-NAME |
    |  +----------+
    |    REPLACE_CWE_NAME
    |
    |  +----------------+
    +--+ CWE-REFERENCES |
    |  +----------------+
    |    REPLACE_CWE_REFERENCES
    |""".replace("REPLACE_CWE_ID", i["cwe_id"]).replace("REPLACE_CWE_NAME", i["cwe_name"]).replace("REPLACE_CWE_REFERENCES",i["cwe_source"])
        table = PrettyTable()
        table.field_names = ["Source", "URL"]
        if result["nist"]:
            for i in result["nist"]["ref_list"]:
                table.add_row(["Nist", i["hyperlink"]])
        if result["vulmon"]:
            for i in result["vulmon"]["references"]:
                table.add_row(["Vulmon", i])
        if result["mitre"]:
            URLS = []
            for i in result["mitre"]["references"].split("\n"):
                a = re.search("https?://.*", i)
                if a: 
                    if is_valid_reference(str(a.group(0))):
                        URLS.append(a.group(0))
            for i in URLS:
                if is_valid_reference(i):
                    table.add_row(["Mitre", i])
        cli_result+=f"""
 +--+---------+
 | REFERENCES |
 +------------+
{table}"""
        if result["vulmon"]:
            if result["vulmon"]["github_repos"]:
                github_table = PrettyTable()
                github_table.field_names = ["Source", "URL"]
                for i in result["vulmon"]["github_repos"]:
                    github_table.add_row(["Mitre", i])
                
                cli_result += f"""
 +--------+ 
 | GITHUB |
 +--------+
{github_table}"""
                if result["vulmon"]["exploits"]:
                    exploit_table = PrettyTable()
                    exploit_table.field_names = ["Source","URL"]
                    for i in result["vulmon"]["exploits"]:
                        exploit_table.add_row(["Vulmon",i["url"]])
                    cli_result += f"""
 +----------+
 | EXPLOITS |
 +----------+
{exploit_table} """
        with io.open(f"output/{cve}/{cve}", "w", encoding="UTF-8") as txt_data:
            txt_data.write(cli_result)
        os.system(f"more output\{cve}\{cve}")
        os.system(f"del output\{cve}\{cve}")
    else:
        sys.exit()


def generate(source, function, cve):
    f=open("scrap_result.json")
    result=json.load(f)
    global is_active
    t1 = threading.Thread(target=function, args=(result, cve,))
    t2 = None
    if source != "cli": t2 = threading.Thread(target=wheel_output,args=(source,))
    t1.start()
    if t2: t2.start()
    time.sleep(2)
    while t1.is_alive(): ""
    is_active = False
    if t2: t2.join()
    is_active = True
