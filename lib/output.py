from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate
from reportlab.platypus import Paragraph
from reportlab.platypus import PageBreak
from reportlab.platypus import Table
from reportlab.lib import colors
from prettytable import PrettyTable
from lib.colors import bcolors
import threading
import importlib
import requests
import logging 
import time
import json
import sys
import os
import io
import re
is_active = True

logging.getLogger('reportlab').setLevel(logging.WARNING)

def wheel_output(source):
    print(f"{bcolors.FG_YELLOW}[│] Generating {source}...", end="")
    while is_active:
        for _ in ["/", "─", "\\", "│"]:
            print(f"\r[{_}] Generating {source}...", end="")
            time.sleep(0.1)
    print(f"\r{bcolors.FG_GREEN}[+] Generating {source} FINISHED!{bcolors.END}")

def pdf(result, cve):
    blockPrint()
    sample_style_sheet = getSampleStyleSheet()
    sample_style_sheet.list()

    my_doc = SimpleDocTemplate(f'output/{cve}/{cve}.pdf')
    flowables = []
    my_doc.build(flowables)
    flowables.append(Paragraph(f"{cve}", sample_style_sheet['Heading1']))
    flowables.append(Paragraph(f"Date", sample_style_sheet['Heading2']))
    flowables.append(Paragraph(f'{result["mitre"]["date_created"][6:8]}.{result["mitre"]["date_created"][4:6]}.{result["mitre"]["date_created"][:4]}', sample_style_sheet['BodyText']))
    flowables.append(Paragraph(f"VECTOR", sample_style_sheet['Heading2']))
    flowables.append(Paragraph(f'{str(result["vulmon"]["overview"]).split("Vector: ")[-1] or result["nist"]["vector"]}',sample_style_sheet['BodyText']))
    flowables.append(Paragraph(f"COMPANY", sample_style_sheet['Heading2']))
    flowables.append(Paragraph(f'{result["mitre"]["assigning_cna"]}',sample_style_sheet['BodyText']))
    flowables.append(Paragraph(f"SCORE", sample_style_sheet['Heading2']))
    flowables.append(Paragraph(f'{result["vulmon"]["degree"] or result["nist"]["base_score"]}',sample_style_sheet['BodyText']))
    flowables.append(Paragraph(f"DESCRIPTION", sample_style_sheet['Heading2']))
    flowables.append(Paragraph(f'{result["nist"]["description"] or result["mitre"]["description"] or result["vulmon"]["description"]}',sample_style_sheet['BodyText']))

    flowables.append(Paragraph(f"REFERENCES", sample_style_sheet['Heading2']))
    data=[["SOURCE", "URL"]]
    mref = str(result["mitre"]["references"]).split("\n")
    URLS = []
    for i in mref:
        a = re.search("https?://.*", i)
        if a: 
            if is_valid_reference(str(a.group(0))):
                URLS.append(a.group(0))
    for i in URLS:
        if is_valid_reference(i):data.append(["mitre",i])
    for i in result["vulmon"]["references"]:
        if is_valid_reference(i):data.append(["vulmon",i])
    for i in result["nist"]["ref_list"]:
        if is_valid_reference(i["hyperlink"]): data.append(["nist",i["hyperlink"]])

    t=Table(data, style=[
                ("GRID", (0, 0), (-1, -1), 1, colors.black),
                ("BACKGROUND", (0, 0), (-1, 0), colors.grey),
                ("INNERGRID", (0, 0), (-1, -1), 0.25, colors.black),
                ("BOX", (0, 0), (-1, -1), 0.25, colors.black),
                ("TEXTCOLOR", (0, 0), (-1, -1), colors.black),
                ("FONTSIZE", (0, 0), (-1, -1), 9),
                ("VALIGN", (0, 0), (-1, -1), "MIDDLE"),
                ("ALIGN", (0, 0), (-1, -1), "LEFT"),
                ])
    Table(data, repeatRows=1)
    flowables.append(t)
    flowables.append(PageBreak())

    my_doc.build(flowables)
    enablePrint()

def is_valid_reference(url):
    try:
        response = requests.get(url)
        if response.status_code == 200 and "godaddy" not in response.raw:
            return True
        return False
    except:
        return False

def html():
    time.sleep(5)
    # HERE WILL BE OUTPUT CODE

def txt():
    # time.sleep(5)
    table = PrettyTable(top_left_junction_char="┌", 
                        top_right_junction_char="┐", 
                        bottom_right_junction_char="┘", 
                        bottom_left_junction_char="└", 
                        top_junction_char="┬",
                        bottom_junction_char="┴",
                        right_junction_char="┤",
                        left_junction_char="├",
                        horizontal_char="─",
                        vertical_char="│",
                        junction_char="┼",
                        )
    table.field_names = ["Source", "URL"]
    table.add_row(["Mitre", "https://github.com/memokazim/cve-db"])
    table.add_row(["Mitre", "https://github.com/memokazim/cve-db"])
    table.add_row(["Mitre", "https://github.com/memokazim/cve-db"])
    table.add_row(["Mitre", "https://github.com/memokazim/cve-db"])
    table.add_row(["Mitre", "https://github.com/memokazim/cve-db"])
    table.add_row(["Mitre", "https://github.com/memokazim/cve-db"])
    print(f"""
╔═════════════╗
║ CVE DETAILS ║
╚══╦══════════╝
   ║  ┌────────┐
   ╟──┤ CVE-ID │
   ║  └────────┘ 
   ║    REPLACE_CVE_ID
   ║
   ║  ┌────────────┐
   ╟──┤ Descripion │
   ║  └────────────┘
   ║    REPLACE_CVE_DESCRIPTION
   ║
   ║  ┌──────┐
   ╟──┤ DATE │
   ║  └──────┘
   ║    REPLACE_CVE_DATE
   ║
   ║  ┌────────┐
   ╟──┤ Vector │
   ║  └────────┘
   ║    REPLACE_VECTOR
   ║
   ║  ┌─────────┐
   ╟──┤ COMPANY │
   ║  └─────────┘
   ║    REPLACE_COMPANY
   ║
   ║  ┌───────┐
   ╟──┤ SCORE │
   ║  └───────┘
   ║    REPLACE_SCORE
   ║
╔══╩══════════╗
║ CWE DETAILS ║
╚══╦══════════╝
   ║  ┌────────┐
   ╟──┤ CWE-ID │
   ║  └────────┘ 
   ║    REPLACE_CWE_ID
   ║
   ║  ┌──────────┐
   ╟──┤ CWE-NAME │
   ║  └──────────┘
   ║    REPLACE_CWE_NAME
   ║
   ║  ┌────────────────┐
   ╟──┤ CWE-REFERENCES │
   ║  └────────────────┘
   ║    REPLACE_CWE_REFERENCES
   ║
╔══╩═════════╗
║ REFERENCES ║
╚════════════╝
{table}


    """)
    # HERE WILL BE OUTPUT CODE

def cli():
    print(f"{bcolors.FG_GREEN}[+] Entering page view!{bcolors.END}")
    proceed = input(f"{bcolors.FG_YELLOW}Do you want to enter page view? (Y/n)> {bcolors.END}").lower()
    while proceed not in ["y", "n", ""]:
        proceed = input(f"{bcolors.FG_YELLOW}Do you want to enter page view? (Y/n)> {bcolors.END}").lower()
    if proceed == "" or proceed == "y":
        filepath = os.path.abspath("cli_sample")
        os.system(f"more {filepath}")
    else:
        sys.exit()


def generate(source, function, cve):
    f=open("scrap_result.json")
    result=json.load(f)
    global is_active
    t1 = threading.Thread(target=function, args=(result, cve))
    t2 = None
    if source != "cli": t2 = threading.Thread(target=wheel_output,args=(source,))
    t1.start()
    if t2: t2.start()
    time.sleep(2)
    while t1.is_alive(): pass
    is_active = False
    if t2: t2.join()
    is_active = True


def blockPrint():
    sys.stdout = open(os.devnull, 'w')

# Restore
def enablePrint():
    importlib.reload(sys)
    sys.stdout = sys.__stdout__