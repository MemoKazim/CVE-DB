from colors import bcolors
from messages import *
from scrap import *
import requests
import random
import time
import sys
import os
import re

if os.name == 'nt':
    os.system("cls")
else:
    os.system("clear")

print(random.choice(banner))

# Retrive CVE from user. Do not trust user input.
user_input = input(f"{bcolors.FG_YELLOW}Enter CVE ID > {bcolors.END}").upper()

# Validate user input using regex
is_valid = re.search("^(CVE-)?[0-9]{4}-[0-9]*$", user_input) # If "CVE-" not written handle situaion 

# Validation process
if is_valid:
    # User input starts with "CVE-" string
    if is_valid.string.startswith("CVE-"):
        cve_full = is_valid.string

    # User input not starts with "CVE-" string
    else:
        cve_full = f"CVE-{is_valid.string}"

    # Check CVE year
    cve_year = int(cve_full.split("-")[1])

    # CVE year shoud be between 1999 - Current Year
    if cve_year > int(time.gmtime().tm_year) or cve_year <= 1999:
        # Prints year out of scope message
        year_message = year_message.replace("YEAR", str(cve_year))
        print(f"{bcolors.FG_RED}{year_message}{bcolors.RED}")
        sys.exit()
    
    # Check CVE id
    cve_id = cve_full.split("-")[2]
    if len(cve_id) < 4 or cve_id == "0000":
        id_message = id_message.replace("CVEID", cve_id)
        print(f"{bcolors.FG_RED}{id_message}{bcolors.END}")
        sys.exit()

# Bad input
else:
    usage_message = usage_message.replace("YEAR", str(time.gmtime().tm_year))
    print(f"{bcolors.FG_RED}{usage_message}{bcolors.END}")
    sys.exit()

# Validation Complated
    
# Create class of given cve in order to access it by typing attribute
class cve:
    full=cve_full
    year=cve_year
    id=cve_id


# Check whether CVE exists
def is_exists(cve):
    URL = f"https://cveawg.mitre.org/api/cve-id/{cve}"
    response = requests.get(URL)
    if response.status_code == 200:
        return response
    else:
        return 0


# Check whether CVE is published
response = is_exists(cve.full)
if response:
    # Check whether CVE state is published?
    if response.json()["state"] != "PUBLISHED":
        cve_state_message = cve_state_message.replace("STATE", str(response.json()["state"])).replace("CVEID", cve.full)
        print(f"{bcolors.FG_RED}{cve_state_message}{bcolors.END}")
        sys.exit()

# If CVE does not exists print error message
else:
    cve_not_exist_message = cve_not_exist_message.replace("CVEID", cve.full)
    print(f"{bcolors.FG_RED}{cve_not_exist_message}{bcolors.END}")
    sys.exit()

# CVE exists and published!
# Get source input from user

SOURCES = {
    "1": scrap_nist,
    "2": scrap_expdb,
    "3": scrap_mitre,
    "4": scrap_vulners,
    "5": scrap_vulmon,
    "*": [scrap_nist, scrap_expdb, scrap_mitre, scrap_vulners, scrap_vulmon]
}
print(f"\n{bcolors.FG_GREEN}[+] Following CVE exists and Published!{bcolors.END}")
sources = list(input(source_choice + f"\n{bcolors.FG_YELLOW}Choose source site > {bcolors.END}").split(","))
sources.sort()

# Enumerate
for source in sources:
    if source not in SOURCES.keys():
        source_message = source_message.replace("SOURCE", source)
        print(f"{bcolors.FG_RED}{source_message}{bcolors.END}")
        sys.exit()
    if source[0] == "*":
        for i in SOURCES["*"]:
            i()
        break
    for i in source:
        SOURCES[i]()